# -*- coding: utf-8 -*-
"""StageE quiz.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GblkN7Qmf-wYr1ayLA43BPLocEluu1mP
"""

# Commented out IPython magic to ensure Python compatibility.
#Import Libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
import statsmodels.api as sm
from pylab import rcParams
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.stattools import acf, pacf
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.arima_model import ARIMA
from fbprophet import Prophet
from scipy.stats import pearsonr

#Mount drive
from google.colab import drive
drive.mount('/content/gdrive')

#Import dataset
df = pd.read_csv('/content/drive/My Drive/household_power_consumption.zip', sep = ';', parse_dates=True)

df.head()

#Check for missing values
df.isna().sum()

#Convert date objects from string to datetime
df['Date'] = pd.to_datetime(df['Date'])
df['Time'] = pd.to_datetime(df['Time'])

#Extract month, date, year, hour, and minute values
df['MONTH']=df['Date'].apply(lambda x: x.month)
df['DAY']=df['Date'].apply(lambda x: x.strftime('%d'))
df['YEAR']=df['Date'].apply(lambda x: x.year)
df['HOUR']=df['Time'].apply(lambda x: x.strftime('%H'))
df['MINUTE']=df['Time'].apply(lambda x: x.strftime('%M'))

#Join date and time columns into a single datetime object
df['TIME'] = pd.to_datetime(df[['YEAR', 'MONTH', 'DAY', 'HOUR', 'MINUTE']])

#set time as index
df.set_index('TIME', inplace = True)

#Retain necessary columns
df = df[['Global_active_power', 'Global_reactive_power',
       'Voltage', 'Global_intensity', 'Sub_metering_1', 'Sub_metering_2',
       'Sub_metering_3']]
df.head()

df = df.replace('?', np.nan)

df.isna().sum()

#convert all values to float
df = df.astype(float)
df.head()

#create active energy consumed column
df['Active_energy_consumed'] = (1000*df['Global_active_power']/60) - df['Sub_metering_1'] - df['Sub_metering_2'] - df['Sub_metering_3']

#explore data visually
plt.figure(figsize = (20, 6))
plt.plot(df.index, df.Active_energy_consumed, '--', marker = '*')

plt.figure(figsize = (20, 6))
plt.plot(df.index, df.Global_active_power, '--', marker = '*')

#Try missing data filling techniques
df_copy = df.copy()
df_copy_ffill = df_copy.fillna(method = 'ffill') #forward fill
df_copy_bfill = df_copy.fillna(method = 'bfill') #backward fill
df_copy_LIF = df_copy.interpolate(method = 'linear', limit_direction = 'forward') 
df_copy_LIB = df_copy.interpolate(method = 'linear', limit_dierction = 'backward')
df_copy_drop = df_copy.dropna()

#downsample to a daily frequency
df_quiz_daily = df.resample('D').sum()

df_quiz_daily=df_quiz_daily.fillna(df_quiz_daily.mean())

df_quiz_daily

df_quiz_daily.isna().sum()

df_quiz_daily

plt.figure(figsize = (10, 6))
plt.plot(df_quiz_daily.index, df_quiz_daily.Global_active_power)

print(df_quiz_daily[['Voltage', 'Global_intensity']].corr(method='pearson'))

print(df_quiz_daily[['Global_reactive_power', 'Global_active_power']].corr(method='pearson'))

df_for_pred = df.reset_index()
df_for_pred = df_for_pred.rename(columns = {'TIME':'ds', 'Global_active_power':'y'})

train = df_for_pred[(len(df_for_pred)-365):]

test = df_for_pred[:(len(df_for_pred)-365)]

model = Prophet()
model.fit(train)
future = model.make_future_dataframe(periods = 365)
forecast = model.predict(future)
forecast.head()

forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper', 'trend', 'trend_lower', 'trend_upper']]

def mean_absolute_percentage_error(y_true, y_pred): 
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

mean_absolute_percentage_error(test['y'],forecast['yhat'] )

from sklearn.metrics import mean_squared_error
mse = mean_squared_error(test['y'],forecast['yhat'] )

rmse = math.sqrt(mse)

